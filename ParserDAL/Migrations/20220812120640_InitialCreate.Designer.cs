// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParserDAL.DataAccess;

#nullable disable

namespace ParserDAL.Migrations
{
    [DbContext(typeof(ScheduleContext))]
    [Migration("20220812120640_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParserDAL.Models.HeadmanAnnotation", b =>
                {
                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Parity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreamGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("HeadmanAnnotations");
                });

            modelBuilder.Entity("ParserDAL.Models.HeadmanChange", b =>
                {
                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PairNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Parity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreamGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("HeadmanChanges");
                });

            modelBuilder.Entity("ParserDAL.Models.HeadmanSchedule", b =>
                {
                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Parity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreamGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("HeadmanSchedules");
                });

            modelBuilder.Entity("ParserDAL.Models.PersonalAnnotation", b =>
                {
                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Parity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreamGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("PersonalAnnotations");
                });

            modelBuilder.Entity("ParserDAL.Models.PersonalChange", b =>
                {
                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("PairNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Parity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreamGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("PersonalChanges");
                });

            modelBuilder.Entity("ParserDAL.Models.PersonalSchedule", b =>
                {
                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Parity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreamGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("PersonalSchedules");
                });

            modelBuilder.Entity("ParserDAL.Models.SharedSchedule", b =>
                {
                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Parity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreamGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("SharedSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
